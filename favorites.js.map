{"version":3,"file":"favorites.js","sources":["../src/html-gererators/favorites-exercises.ts","../src/js/init-favorites.ts","../src/favorites.ts"],"sourcesContent":["import { Exercise } from '../js/types/general.types';\n\n\nexport function renderExerciseCard(exercise: Exercise): string {\n  return `\n<li class=\"exercises-category-tile-item\" data-id=\"${exercise._id}\">\n                  <div class=\"exercises-category-tile-top\">\n                    <div class=\"exercises-category-tile-top-wrapper\">\n                    <span class=\"exercises-category-tile-badge\">WORKOUT</span>\n                    <button class=\"exercises-category-tile-button-delete\" aria-label=\"Remove from favorites\" data-id=\"${exercise._id}\">\n                      <svg class=\"icon\" width=\"20\" height=\"20\">\n                        <use href=\"./img/sprite.svg#trash\"></use>\n                      </svg>\n                    </button>\n                    </div>\n                    <div class=\"exercises-category-tile-top-wrapper\">\n                    <span class=\"exercises-category-tile-start\">Start</span>\n                    <button class=\"exercises-category-tile-button-start\" aria-label=\"Start workout\">\n                      <svg class=\"icon\" width=\"20\" height=\"20\">\n                        <use href=\"./img/sprite.svg#arrow-right\"></use>\n                      </svg>\n                    </button>\n                    </div>\n\n                  </div>\n            \n                  <div class=\"exercises-category-tile-middle\">\n                    <div class=\"exercises-category-tile-man-icon-container\">\n                      <svg class=\"exercises-category-tile-man-icon\" width=\"24\" height=\"24\">\n                        <use href=\"./img/sprite.svg#running\"></use>\n                      </svg>\n                    </div>\n                    <h3 class=\"exercise-name\">${exercise.name}</h3>\n                  </div>\n            \n                  <div class=\"exercises-category-tile-bottom\">\n                    <div class=\"exercises-category-tile-bottom-item\">\n                      <span class=\"exercises-category-tile-bottom-title\">Burned calories:</span>\n                      <span class=\"exercises-category-tile-bottom-value\">${exercise.burnedCalories} / ${exercise.time} min</span>\n                    </div>\n                    <div class=\"exercises-category-tile-bottom-item\">\n                      <span class=\"exercises-category-tile-bottom-title\">Body part:</span>\n                      <span class=\"exercises-category-tile-bottom-value\">${exercise.bodyPart}</span>\n                    </div>\n                    <div class=\"exercises-category-tile-bottom-item\">\n                      <span class=\"exercises-category-tile-bottom-title\">Target:</span>\n                      <span class=\"exercises-category-tile-bottom-value\">${exercise.target}</span>\n                    </div>\n                  </div>\n                </li>\n    `;\n}","import { Exercise } from \"./types/general.types\";\nimport { YOUR_ENERGY_API_URL } from \"./constants/general\";\nimport { renderExerciseCard } from \"../html-gererators/favorites-exercises\";\n\n\nexport function initFavorites(): void {\n  function isDesktop(): boolean {\n    return window.innerWidth >= 1024;\n  }\n  \n  function isTablet(): boolean {\n    return window.innerWidth >= 768 && window.innerWidth < 1024;\n  }\n  \n  function getItemsPerPage(): number {\n    if (isTablet()) return 10;\n    return 8;\n  }\n\n  const favoritesOutputContainer = document.querySelector('.exercises-content') as HTMLElement;\n  if (!favoritesOutputContainer) return;\n\n  function loadFavoriteIds(): string[] {\n    try {\n      const raw = localStorage.getItem('favorites');\n      if (!raw) return [];\n  \n      const data = JSON.parse(raw);\n\n      if (!Array.isArray(data) || !data.every(id => typeof id === 'string')) {\n        throw new Error('Invalid format in favorites');\n      }\n  \n      return data;\n\n    } catch (error) {\n      console.error('Failed to load favorites from localStorage:', error);\n      localStorage.removeItem('favorites');\n      return [];\n    }\n  }\n\n  async function fetchExerciseById(id: string): Promise<Exercise | null> {\n    try {\n      const res = await fetch(`${YOUR_ENERGY_API_URL}exercises/${id}`);\n      if (!res.ok) throw new Error('Exercise not found');\n      const data = await res.json();\n      return data;\n    } catch (error) {\n      console.error(`Failed to fetch exercise with id ${id}:`, error);\n      return null;\n    }\n  }\n\n  function deleteFavorite(id: string): void {\n    const storedIds = loadFavoriteIds();\n    const updatedIds = storedIds.filter(favId => favId !== id);\n    localStorage.setItem('favorites', JSON.stringify(updatedIds));\n    loadAndRenderFavorites();\n  }\n\n  function attachDeleteListeners(): void {\n    const trashButtons = favoritesOutputContainer.querySelectorAll<HTMLButtonElement>(\n      '.exercises-category-tile-button-delete'\n    );\n    trashButtons.forEach(button => {\n      button.addEventListener('click', () => {\n        const id = button.dataset.id;\n        if (!id) return;\n        deleteFavorite(id);\n      });\n    });\n  }\n\n  function renderPagination(\n    totalPages: number,\n    currentPage: number,\n    onPageChange: (page: number) => void\n  ): HTMLElement {\n    const paginationContainer = document.createElement('div');\n    paginationContainer.classList.add('pagination');\n\n    for (let i = 1; i <= totalPages; i++) {\n      const pageButton = document.createElement('button');\n      pageButton.classList.add('pagination-btn');\n      if (i === currentPage) pageButton.classList.add('active');\n      pageButton.textContent = i.toString();\n      pageButton.dataset.page = i.toString();\n\n      pageButton.addEventListener('click', () => onPageChange(i));\n\n      paginationContainer.appendChild(pageButton);\n    }\n\n    return paginationContainer;\n  }\n\n  async function loadAndRenderFavorites(): Promise<void> {\n    const favoriteIds = loadFavoriteIds();\n    console.log(favoriteIds);\n    \n    const fetchPromises = favoriteIds.map(id => fetchExerciseById(id));\n    const results = await Promise.all(fetchPromises);\n    const validExercises = results.filter((ex): ex is Exercise => ex !== null);\n\n    if (validExercises.length === 0) {\n      favoritesOutputContainer.innerHTML = `\n        <p class=\"no-favorites\">\n          It appears that you haven't added any exercises to your favorites yet.\n          To get started, you can add exercises that you like to your favorites for easier access in the future.\n        </p>`;\n      return;\n    }\n\n    let currentPage = 1;\n    const itemsPerPage = getItemsPerPage();\n    const totalPages = isDesktop() ? 1 : Math.ceil(validExercises.length / itemsPerPage);\n\n    const renderPage = (page: number): void => {\n      currentPage = page;\n      const start = (page - 1) * itemsPerPage;\n      const visibleItems = isDesktop() ? validExercises : validExercises.slice(start, start + itemsPerPage);\n\n      const markup = visibleItems.map(renderExerciseCard).join('');\n\n      if (isDesktop()) {\n        favoritesOutputContainer.innerHTML = `\n          <div class=\"exercises-scroll-container\">\n            <ul class=\"exercises-list\">${markup}</ul>\n          </div>\n        `;\n      } else {\n        favoritesOutputContainer.innerHTML = `<ul class=\"exercises-list\">${markup}</ul>`;\n        favoritesOutputContainer.appendChild(renderPagination(totalPages, currentPage, renderPage));\n      }\n\n      attachDeleteListeners();\n    };\n\n    renderPage(currentPage);\n  }\n\n  loadAndRenderFavorites();\n}\n\n\n\n// import { Exercise } from \"./types/general.types\";\n// import { YOUR_ENERGY_API_URL } from \"./constants/general\";\n// import { renderExerciseCard } from \"../html-gererators/favorites-exercises\";\n\n\n// export function initFavorites(): void {\n//   const favoritesOutputContainer = document.querySelector('.exercises-content') as HTMLElement;\n//   if (!favoritesOutputContainer) return;\n\n//   function loadFavoriteIds(): string[] {\n//     try {\n//       const data = JSON.parse(localStorage.getItem('favorites') || '[]');\n//       return Array.isArray(data) ? data : [];\n//     } catch (error) {\n//       console.error('Failed to load favorites from localStorage:', error);\n//       return [];\n//     }\n//   }\n\n//   async function fetchExerciseById(id: string): Promise<Exercise | null> {\n//     try {\n//       const res = await fetch(`${YOUR_ENERGY_API_URL}/exercises/${id}`);\n//       if (!res.ok) throw new Error('Exercise not found');\n//       const data = await res.json();\n//       return data;\n//     } catch (error) {\n//       console.error(`Failed to fetch exercise with id ${id}:`, error);\n//       return null;\n//     }\n//   }\n\n//   function deleteFavorite(id: string): void {\n//     const storedIds = loadFavoriteIds();\n//     const updatedIds = storedIds.filter(favId => favId !== id);\n//     localStorage.setItem('favorites', JSON.stringify(updatedIds));\n//     loadAndRenderFavorites();\n//   }\n  \n\n//   function attachDeleteListeners(): void {\n//     const trashButtons = favoritesOutputContainer.querySelectorAll<HTMLButtonElement>(\n//       '.exercises-category-tile-button-delete'\n//     );\n\n//     trashButtons.forEach(button => {\n//       button.addEventListener('click', () => {\n//         const id = button.dataset.id;\n//         if (!id) return;\n//         deleteFavorite(id);\n//       });\n//     });\n//   }\n\n//   async function loadAndRenderFavorites(): Promise<void> {\n//     const favoriteIds = loadFavoriteIds();\n//     const fetchPromises = favoriteIds.map(id => fetchExerciseById(id));\n//     const results = await Promise.all(fetchPromises);\n//     const validExercises = results.filter((ex): ex is Exercise => ex !== null);\n\n//     if (validExercises.length === 0) {\n//       favoritesOutputContainer.innerHTML = `\n//         <p>It appears that you haven't added any exercises to your favorites yet. \n//         To get started, you can add exercises that you like to your favorites for easier access in the future.</p>`;\n//       return;\n//     }\n\n//     favoritesOutputContainer.innerHTML = validExercises\n//       .map(renderExerciseCard)\n//       .join(''); \n\n//     attachDeleteListeners();\n//   }\n\n//   loadAndRenderFavorites();\n// }","import { fetchQuote } from \"./js/quote\";\nimport { initFooter } from './js/init-footer';\nimport { initFavorites } from \"./js/init-favorites\";\n\n\nfetchQuote();\ninitFavorites();\ninitFooter();\n"],"names":["renderExerciseCard","exercise","initFavorites","isDesktop","isTablet","getItemsPerPage","favoritesOutputContainer","loadFavoriteIds","raw","data","id","error","fetchExerciseById","res","YOUR_ENERGY_API_URL","deleteFavorite","updatedIds","favId","loadAndRenderFavorites","attachDeleteListeners","button","renderPagination","totalPages","currentPage","onPageChange","paginationContainer","i","pageButton","favoriteIds","fetchPromises","validExercises","ex","itemsPerPage","renderPage","page","start","markup","fetchQuote","initFooter"],"mappings":"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"}